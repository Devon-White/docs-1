/**
 * Removes the leading slash from a given path.
 *
 * @param {string} path - The path to normalize.
 * @returns {string} - The normalized path.
 */
export function normalizePath(path) {
  return path.startsWith("/") ? path.slice(1) : path;
}

/**
 * Recursively searches for the currentPath in an array of sidebar items.
 *
 * @param {Array} items - The sidebar items.
 * @param {string} currentPath - The path to match.
 * @returns {boolean} - True if the path is found; otherwise, false.
 */
export function findPathInItems(items, currentPath) {
  for (const item of items) {
    if (typeof item === "string") {
      if (item.startsWith(currentPath)) {
        return true;};
    } else if (item.type === "doc") {
      if (item.id.includes(currentPath)) return true;
    } else if (item.type === "autogenerated") {
      if (currentPath.includes(item.dirName)) return true;
    } else if (item.type === "category") {
      // Optionally check the categoryâ€™s link if it exists.
      if (
        item.link &&
        item.link.type === "doc" &&
        item.link.id.includes(currentPath)
      ) {
        return true;
      }
      // Recursively search for the currentPath in the category items.
      if (
        Array.isArray(item.items) &&
        findPathInItems(item.items, currentPath)
      ) {
        return true;
      }
    }
  }
  return false;
}
